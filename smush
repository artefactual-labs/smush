#!/usr/bin/env python

from __future__ import print_function
import sys
import github
import app
from topicmerge import TopicMerge


def main():
    """Automates merging of topic branches.

        usage: smush [-h] [--check] [--skip-style-check] [--skip-pr-check]
                     [--delete-local] [--profile PROFILE]
                     topic_branch

    This script automates steps required to cleanly merge a topic branch into a
    base branch. No merge commits are made. Before merging, the topic branch is
    rebased so it can be merged using `--ff-only` then pushed.

    If merging this way and using GitHub, and a pull request exists for the topic 
    branch, the pull request will be automatically marked as merged and closed.
    """
    # Parse CLI args and load configuration
    args = app.arg_parser().parse_args()
    config = app.load_config(args.profile)

    # Initializee topic branch merge handler
    try:
        merge = TopicMerge(config['base branch'], args.topic_branch, delete_local=args.delete_local)
    except Exception as e:
        app.abort(str(e))

    # Check branch and exit, if in --check mode
    if args.check:
        app.check_topic_branch_commits(merge, args.skip_style_check)
        sys.exit(0)

    # Make sure an open pull request exists for the dev branch
    if 'github owner' in config and 'github repo' in config and not args.skip_pr_check:
        # Prepare to access Github repository
        try:
            repo = github.Github().get_repo("{}/{}".format(config['github owner'], config['github repo']))
        except github.UnknownObjectException:
            app.abort('Github repository not found.')

        # Cycle through pulls request to find the first one for the topic branch
        pr = None
        for pull in repo.get_pulls(state='open'):
            if pull.head.ref == args.topic_branch:
                pr = pull

        # Report an error finding an appropriate pull request
        if not pr:
            app.abort('Could not find pull request for this topic branch.')
        elif pr.base.ref != config['base branch']:
            error_message = "The pull request's base is {}, not {}.".format(pr.base.ref, config['base branch'])
            app.abort(error_message)

    # Show "before notes" from config, if any
    if 'before notes' in config:
        print(config['before notes'])

    merge.update_base_and_rebase_topic()

    # Check number of commits and commit style
    print('Checking QA branch...')
    app.check_topic_branch_commits(merge)

    # Merge or abort
    if not app.get_confirmation('Would you like to merge the above commits?'):
        merge.git.checkout(args.topic_branch)
        app.abort('Merge aborted.')

    merge.merge_and_cleanup()

    print('Done!')

    # Show "after notes" from config, if any
    if 'after notes' in config:
        print(config['after notes'])


if __name__ == '__main__':
    main()
