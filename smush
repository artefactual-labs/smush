#!/usr/bin/env python

from __future__ import print_function
from builtins import input
import argparse
import git
import os
import sys
import yaml


def load_config(config_filename):
    config_path = os.path.expanduser('~/' + config_filename)
    return yaml.safe_load(open(config_path))


def get_confirmation(prompt):
    confirm = input(prompt + ' [y/n] ')
    return len(confirm) and confirm[0].lower() == 'y'


def main():

    # Parse arguments
    parser = argparse.ArgumentParser(
        description='Automate merging of feature branches.')
    parser.add_argument('dev_branch', metavar='dev_branch', type=str,
                        help='feature branch to merge')
    args = parser.parse_args()

    # Attempt to load configuration file
    config_filename = '.smush.yml'
    try:
        config = load_config(config_filename)
    except:
        print('Unable to load ~/' + config_filename + ': does it exist?')
        sys.exit(1)

    # Verify QA branch has been set in the config file
    if 'qa branch' not in config:
        print('Please set "qa branch" in ' + config_filename + '.')
        sys.exit(1)

    # Set QA branch name from config
    qa_branch = config['qa branch']

    # Make sure command's being executed in a Git repository
    try:
        git.Repo('.').git_dir
        g = git.cmd.Git('.')
    except:
        print('You must be in a git repository to run this command.')
        sys.exit(1)

    # Show "before notes" from config, if any
    if 'before notes' in config:
        print(config['before notes'])

    # Make sure QA branch is up to date
    print('Checking out QA branch...')
    g.checkout(qa_branch)
    print('Updating QA branch...')
    g.pull('--rebase')

    # Rebase dev branch
    print('Checking out dev branch..')
    g.checkout(args.dev_branch)
    print('Updating dev branch with work from QA...')
    g.rebase(qa_branch)

    # Push rebased version (so it'll get marked as merged later if on
    # Github)
    print('Pushing updated dev branch...')
    g.push('--force')

    # Do actual merge (with fast forward option as dev branch is rebased)
    print('Checking out QA branch...')
    g.checkout(qa_branch)

    # Display unmerged commits in dev branch
    print()
    print(g.log('..' + args.dev_branch))
    print()
    if not get_confirmation('Would you like to merge the above commits?'):
        print('Merge aborted.')
        sys.exit(1)

    print('Merging dev branch...')
    g.merge('--ff-only', args.dev_branch)

    # Push merge and delete dev branch
    print('Pushing QA branch with dev branch merged...')
    g.push()
    print('Deleting dev branch...')
    g.push('origin', ':' + args.dev_branch)

    print('Done!')

    # Show "after notes" from config, if any
    if 'after notes' in config:
        print(config['after notes'])


if __name__ == '__main__':
    main()
