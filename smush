#!/usr/bin/env python

from __future__ import print_function
import subprocess
import sys
import app
import git_log_style_checker
import github
import topicmerge


def display_unmerged_commits(merge):
    print()
    print(merge.unmerged_log())
    print()


def display_commit_style_errors(merge):
    parsed_log = git_log_style_checker.parse_and_check_git_log_output(merge.unmerged_log())

    errors_found = False
    for commit in parsed_log:
        if "errors" in commit and len(commit["errors"]):
            errors_found = True

            print("Style error(s) found in commit {}:".format(commit["hash"]))
            print()

            for line in commit["errors"]:
                print("    {}".format(line))

            print()

    if not errors_found:
        print("No style errors found.")


def check_topic_branch_commits(merge, skip_style_check=False):
    starting_branch = merge.active_branch()

    # Determine number of new commits and offer to rebase if greater than one
    if merge.unmerged_total() > 1:
        display_unmerged_commits(merge)

        print('There is more than one new commit present in dev branch.')
        if app.get_confirmation('Would you like to interactively rebase?'):
            merge.git.checkout(merge.topic_branch)
            subprocess.call(['git', 'rebase', '-i', 'HEAD~' + str(merge.unmerged_total())])
            print('Updating dev branch...')
            merge.git.push('--force')
            merge.git.checkout(starting_branch)
    elif merge.unmerged_total() == 0:
        app.abort('No unmerged commits found.')

    # Display unmerged commits in dev branch
    display_unmerged_commits(merge)

    # Show commit style errors
    if not skip_style_check:
        display_commit_style_errors(merge)


def main():
    # Parse CLI args and load configuration
    args = app.arg_parser().parse_args()
    config = app.load_config(args.profile)

    # Initializee topic branch merge handler
    try:
        merge = topicmerge.TopicMerge(config['base branch'], args.topic_branch, delete_local=args.delete_local)
    except Exception as e:
        app.abort(str(e))

    # Check branch and exit, if in --check mode
    if args.check:
        check_topic_branch_commits(merge, args.skip_style_check)
        sys.exit(0)

    # Make sure an open pull request exists for the dev branch
    if 'github owner' in config and 'github repo' in config and not args.skip_pr_check:
        try:
            github.check_for_valid_pull_request(config, config['base branch'], args.dev_branch)
        except Exception as e:
            app.abort(str(e))

    # Show "before notes" from config, if any
    if 'before notes' in config:
        print(config['before notes'])

    merge.update_base_and_rebase_topic()

    # Check number of commits and commit style
    print('Checking QA branch...')
    check_topic_branch_commits(merge)

    # Merge or abort
    if not app.get_confirmation('Would you like to merge the above commits?'):
        merge.git.checkout(args.topic_branch)
        app.abort('Merge aborted.')

    merge.merge_and_cleanup()

    print('Done!')

    # Show "after notes" from config, if any
    if 'after notes' in config:
        print(config['after notes'])


if __name__ == '__main__':
    main()
